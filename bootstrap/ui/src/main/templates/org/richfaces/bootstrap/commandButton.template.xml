<?xml version="1.0" encoding="UTF-8"?>

<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el"
          xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
          xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core"
          xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite">

    <cc:interface>
        <cdk:class>org.richfaces.bootstrap.renderkit.CommandButtonRenderer</cdk:class>
        <cdk:superclass>org.richfaces.bootstrap.renderkit.CommandButtonRendererBase</cdk:superclass>
        <cdk:renderer-type>org.richfaces.bootstrap.CommandButtonRenderer</cdk:renderer-type>
        <cdk:renders-children>true</cdk:renders-children>
        <cdk:component-base-class>org.richfaces.bootstrap.component.AbstractCommandButton</cdk:component-base-class>
    </cc:interface>

    <cc:implementation>
        <cdk:object type="java.lang.String" name="type" value="#{'client' eq component.attributes['mode'].toString() ? 'button' : component.attributes['type'].toString()}"/>
        <c:choose>
            <c:when test="#{component.hasFacet('split')}">
                <div id="#{clientId}"
                    cdk:passThrough="style"
                    class="btn-group #{component.styleClass} #{component.vertical ne null ? component.vertical.buttonClass : ''}">
                    
                    <cdk:renderFragment name="renderCommandButton" type="#{type}" split="true" />
                    
                    <button data-toggle="dropdown" class="btn dropdown-toggle #{component.severity ne null ? component.severity.buttonClass : ''} #{component.scale ne null ? component.scale.buttonStyleClass : ''}">
                        <span class="caret" style="#{component.color ne null and !component.color.equals('') ? 'border-top-color:'.concat(component.color).concat(';border-bottom-color:').concat(component.color).concat(';') : ''}"></span>
                    </button>
                    
                    <ul class="dropdown-menu #{component.horizontal ne null ? component.horizontal.buttonClass : ''}">
                        <c:forEach var="child" items="#{component.getFacetChildren('split')}">
                            <li>
                                <cdk:call expression="child.encodeAll(facesContext)" />
                            </li>
                        </c:forEach>
                    </ul>
                </div>
            </c:when>
            
            <c:otherwise>
                <cdk:renderFragment name="renderCommandButton" type="#{type}" />
            </c:otherwise>
        </c:choose>
    </cc:implementation>
    
    <cdk:fragment name="renderButton">
        <cc:interface>
            <cc:attribute name="type" type="java.lang.String" required="true" />
            <cc:attribute name="split" type="boolean" default="false" />
        </cc:interface>
        
        <cc:implementation>
            <button name="#{clientId}"
                value="#{component.value}"
                class="btn #{!cc.attrs.split ? component.styleClass : ''} #{component.severity ne null ? component.severity.buttonClass : ''} #{component.scale ne null ? component.scale.buttonStyleClass : ''}"
                style="#{component.color ne null and !component.color.equals('') ? 'color:'.concat(component.color).concat(';') : ''}#{!cc.attrs.split ? component.style : ''}"
                onclick="#{this.getOnClick(facesContext, component)}"
                cdk:passThrough="title ondblclick onmousedown onmouseup onmouseover onmousemove onmouseout disabled"
                type="#{cc.attrs.type}">
                
                <cdk:call expression="encodeId(facesContext, component, split, clientId);"/>

                <c:if test="#{!empty(component.icon)}">
                    <i class="icon-#{component.icon}"></i>#{" "}
                </c:if>
                
                #{component.value}
                
                <cdk:call expression="renderChildren(facesContext, component);" />
            
            </button>
        </cc:implementation>
    </cdk:fragment>
    
    <cdk:fragment name="renderInput">
        <cc:interface>
            <cc:attribute name="type" type="java.lang.String" />
            <cc:attribute name="split" type="boolean" default="false" />
        </cc:interface>
        
        <cc:implementation>
            <input type="submit"
                name="#{clientId}"
                class="btn #{!cc.attrs.split ? component.styleClass : ''} #{component.severity ne null ? component.severity.buttonClass : ''} #{component.scale ne null ? component.scale.buttonStyleClass : ''}"
                style="#{component.color ne null and !component.color.equals('') ? 'color:'.concat(component.color).concat(';') : ''}#{!cc.attrs.split ? component.style : ''}"
                value="#{component.value}"
                onclick="#{this.getOnClick(facesContext, component)}"
                cdk:passThrough="title ondblclick onmousedown onmouseup onmouseover onmousemove onmouseout disabled">
                
                <cdk:call expression="encodeId(facesContext, component, split, clientId);"/>
                <cdk:call expression="encodeTypeAndImage(facesContext, component);"/>
            
            </input>
        </cc:implementation>
    </cdk:fragment>
    
    <cdk:fragment name="renderCommandButton">
        <cc:interface>
            <cc:attribute name="type" type="java.lang.String" />
            <cc:attribute name="split" type="boolean" default="false" />
        </cc:interface>
        
        <cc:implementation>
            <c:choose>
                <c:when test="#{component.tag eq 'button'}">
                    <cdk:renderFragment name="renderButton" type="#{cc.attrs.type}" split="#{cc.attrs.split}" />
                </c:when>
                <c:when test="#{component.tag eq 'input'}">
                    <cdk:renderFragment name="renderInput"  type="#{cc.attrs.type}" split="#{cc.attrs.split}" />
                </c:when>
            </c:choose>
        </cc:implementation>
    </cdk:fragment>
</cdk:root>
