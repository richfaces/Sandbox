<!DOCTYPE html>

<ui:composition template="/resources/doc.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:rich="http://richfaces.org/rich"
    xmlns:a4j="http://richfaces.org/a4j" xmlns:b="http://richfaces.org/sandbox/bootstrap">

    <ui:define name="content">
        <header id="overview" class="jumbotron subhead">
            <h1>Scaffolding</h1>
            <p class="lead">Bootstrap is built on a responsive 12-column grid. We've also included fixed- and
                fluid-width layouts based on that system.</p>
            <div class="subnav">
                <ul class="nav nav-pills">
                    <li class="active"><a href="#global">Global styles</a></li>
                    <li><a href="#gridSystem">Grid system</a></li>
                    <li><a href="#fluidGridSystem">Fluid grid system</a></li>
                    <li><a href="#gridCustomization">Customizing</a></li>
                    <li><a href="#layouts">Layouts</a></li>
                    <li><a href="#responsive">Responsive design</a></li>
                </ul>
            </div>
        </header>

        <section id="global">
            <div class="page-header">
                <h1>
                    Global styles <small>for CSS reset, typography, and links</small>
                </h1>
            </div>

            <h2>Requires HTML5 doctype</h2>
            <p>Bootstrap makes use of certain HTML elements and CSS properties that require the use of the HTML5
                doctype. Include it at the beginning of all your projects.</p>

            <b:codeblock>
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
    ...
&lt;/html&gt;</b:codeblock>

            <h2>Typography and links</h2>
            <p>Bootstrap sets basic global display, typography, and link styles. Specifically, we:</p>
            <ul>
                <li>Remove <code>margin</code> on the body
                </li>
                <li>Set <code>background-color: white;</code> on the <code>body</code></li>
                <li>Use the <code>@baseFontFamily</code>, <code>@baseFontSize</code>, and <code>@baseLineHeight</code>
                    attributes as our typographyic base
                </li>
                <li>Set the global link color via <code>@linkColor</code> and apply link underlines only on <code>:hover</code></li>
            </ul>
            <p>
                These styles can be found within <strong>scaffolding.less</strong>.
            </p>

            <h2>Reset via Normalize</h2>
            <p>
                With Bootstrap 2, the old reset block has been dropped in favor of <a target="_blank"
                    href="http://necolas.github.com/normalize.css/">Normalize.css</a>, a project by <a target="_blank"
                    href="http://twitter.com/necolas">Nicolas Gallagher</a> that also powers the <a target="_blank"
                    href="http://html5boilerplate.com">HTML5 Boilerplate</a>. While we use much of Normalize within our
                <strong>reset.less</strong>, we have removed some elements specifically for Bootstrap.
            </p>

        </section>

        <section id="gridSystem">
            <h:outputStylesheet>
            /* Special grid styles
-------------------------------------------------- */
            .show-grid {
                margin-top: 10px;
                margin-bottom: 20px;
            }
            .show-grid [class*="span"] {
                background-color: #eee;
                text-align: center;
                -webkit-border-radius: 3px;
                -moz-border-radius: 3px;
                border-radius: 3px;
                min-height: 30px;
                line-height: 30px;
            }
            .show-grid:hover [class*="span"] {
                background: #ddd;
            }
            .show-grid .show-grid {
                margin-top: 0;
                margin-bottom: 0;
            }
            .show-grid .show-grid [class*="span"] {
                background-color: #ccc;
            }

        </h:outputStylesheet>

            <div class="page-header">
                <h1>
                    Default grid system <small>12 columns with a responsive twist</small>
                </h1>
            </div>

            <h2>Live grid example</h2>
            <p>
                The default Bootstrap grid system utilizes <strong>12 columns</strong>, making for a 940px wide
                container without <a href="#responsive">responsive features</a> enabled. With the responsive CSS file
                added, the grid adapts to be 724px and 1170px wide depending on your viewport. Below 767px viewports,
                the columns become fluid and stack vertically.
            </p>

            <ui:include src="/resources/sample.xhtml">
                <ui:param name="tag" value="grid" />
                <ui:param name="sample" value="basic" />
            </ui:include>

            <h3>Basic grid HTML</h3>
            <p>
                For a simple two column layout, create a
                <code>b:gridRow</code>
                and add the appropriate number of
                <code>b:gridColumn</code>
                which the correct value for
                <code>span</code>
                attribute. As this is a 12-column grid, each
                <code>span</code>
                spans a number of those 12 columns, and should always add up to 12 for each row.
            </p>

            <b:codeblock>
&lt;b:gridRow&gt;
    &lt;b:gridColumn span="4"&gt;...&lt;/b:gridColumn&gt;
    &lt;b:gridColumn span="8"&gt;...&lt;/b:gridColumn&gt;
&lt;/b:gridRow&gt;</b:codeblock>

            <p>
                Given this example, we have
                <code>span="4"</code>
                and
                <code>span="8"</code>
                , making for 12 total columns and a complete row.
            </p>

            <h2>Offsetting columns</h2>
            <p>
                Move columns to the left using
                <code>offset</code>
                attribute. Each class increases the left margin of a column by a whole column. For example,
                <code>offset="4"</code>
                moves
                <code>span="4"</code>
                over four columns.
            </p>

            
            <ui:include src="/resources/sample.xhtml">
                <ui:param name="tag" value="grid" />
                <ui:param name="sample" value="offset-nonfluid" />
            </ui:include>
            

            <h2>Nesting columns</h2>
            <p>
                To nest your content with the default grid, add a new
                <code>b:gridRow</code>
                and set of
                <code>b:gridColumn</code>
                columns within an existing
                <code>b:gridColumn</code>
                . Nested rows should include a set of columns that add up to the number of columns of its parent.
            </p>
            <h3>Example</h3>
            <p>
                Here two nested
                <code>b:gridColumn span="5"</code>
                are placed within a
                <code>b:gridColumn span="10"</code>
                .
            </p>

            <ui:include src="/resources/sample.xhtml">
                <ui:param name="tag" value="grid" />
                <ui:param name="sample" value="nest" />
            </ui:include>
        </section>

        <section id="fluidGridSystem">
            <div class="page-header">
                <h1>
                    Fluid grid system <small>12 responsive, percent-based columns</small>
                </h1>
            </div>

            <h2>Live fluid grid example</h2>
            <p>The fluid grid system uses percents instead of pixels for column widths. It has the same responsive
                capabilities as our fixed grid system, ensuring proper proportions for key screen resolutions and
                devices.</p>

            <h3>Basic fluid grid HTML</h3>
            <p>
                Make any row "fluid" by changing
                <code>fluid</code>
                attribute to
                <code>true</code>
                . The column classes stay the exact same, making it easy to flip between fixed and fluid grids.
            </p>

            <ui:include src="/resources/sample.xhtml">
                <ui:param name="tag" value="grid" />
                <ui:param name="sample" value="basic" />
            </ui:include>

            <h2>Fluid nesting</h2>
            <p>Nesting with fluid grids is a bit different: the number of nested columns should not match the
                parent's number of columns. Instead, each level of nested columns are reset because each row takes up
                100% of the parent column.</p>


            <ui:include src="/resources/sample.xhtml">
                <ui:param name="tag" value="grid" />
                <ui:param name="sample" value="nest-fluid" />
            </ui:include>

        </section>

        <section id="gridCustomization">
            <div class="page-header">
                <h1>Grid customization</h1>
            </div>

            <h2>Variables in LESS</h2>
            <p>
                The default grid is built on a few variables for easy customization via LESS. All variables can be found
                in <strong>variables.less</strong>.
            </p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Variable</th>
                        <th>Default value</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>@gridColumns</code></td>
                        <td>12</td>
                        <td>Number of columns</td>
                    </tr>
                    <tr>
                        <td><code>@gridColumnWidth</code></td>
                        <td>60px</td>
                        <td>Width of each column</td>
                    </tr>
                    <tr>
                        <td><code>@gridGutterWidth</code></td>
                        <td>20px</td>
                        <td>Negative space between columns</td>
                    </tr>
                    <tr>
                        <td><code>@fluidGridColumnWidth</code></td>
                        <td>6.382978723%</td>
                        <td>Width of each fluid column</td>
                    </tr>
                    <tr>
                        <td><code>@fluidGridGutterWidth</code></td>
                        <td>2.127659574%</td>
                        <td>Negative space between fluid columns</td>
                    </tr>
                </tbody>
            </table>

            <h3>How to customize</h3>
            <p>
                Modifying the grid means changing the three
                <code>@grid*</code>
                variables and recompiling Bootstrap. Change the grid variables in <strong>variables.less</strong> and
                use one of the <a href="less.html#compiling">four ways documented to recompile</a>. If you're adding
                more columns, be sure to add the CSS for those in <strong>grid.less</strong>.
            </p>

            <h2>Staying responsive</h2>
            <p>
                Customization of the grid only works at the default level, the 940px grid. To maintain the responsive
                aspects of Bootstrap, you'll also have to manually customize the grids in <strong>responsive.less</strong>
                until a future update improves this.
            </p>

        </section>

        <section id="layouts">
            <div class="page-header">
                <h1>
                    Layouts <small>Basic templates to create webpages</small>
                </h1>
            </div>

            <h2>Fixed layout</h2>
            <p>
                Provides a common fixed-width (and optionally responsive) layout with only
                <code>b:gridContainer</code>
                required.
            </p>
            <div class="mini-layout">
                <div class="mini-layout-body"></div>
            </div>
            
            <b:codeblock>
&lt;h:body&gt;
    &lt;b:gridContainer&gt;
        ...
    &lt;/b:gridContainer&gt;
&lt;/h:body&gt;</b:codeblock>
            

            <h2>Fluid layout</h2>
            <p>
                Create a fluid, two-column page with
                <code>fluid</code>
                attribute set to <code>true</code> - great for applications and docs.
            </p>
            <div class="mini-layout fluid">
                <div class="mini-layout-sidebar"></div>
                <div class="mini-layout-body"></div>
            </div>
            <b:codeblock>
&lt;h:body&gt;
    &lt;b:gridContainer fluid="true"&gt;
        ...
    &lt;/b:gridContainer&gt;
&lt;/h:body&gt;</b:codeblock>
        </section>

        <section id="responsive">
            <div class="page-header">
                <h1>
                    Responsive design <small>Media queries for various devices and resolutions</small>
                </h1>
            </div>

            <h2>Enabling responsive features</h2>
            <p>
                Turn on responsive CSS in your project by including the proper meta tag and additional stylesheet within
                the
                <code>&lt;head&gt;</code>
                of your document. If you've compiled Bootstrap from the Customize page, you need only include the meta
                tag.
            </p>
            
            <b:codeblock>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</b:codeblock>
            
            <p>
                <span class="label label-info">Heads up!</span> Bootstrap doesn't include responsive features by default
                at this time as not everything needs to be responsive. Instead of encouraging developers to remove this
                feature, we figure it best to enable it as needed.
            </p>

            <h2>About responsive Bootstrap</h2>
            
            <h:graphicImage value="/resources/img/responsive-illustrations.png"
                alt="Responsive devices"
                style="float: right; margin: 0 0 20px 20px;" />
            
            <p>
                Media queries allow for custom CSS based on a number of conditions - ratios, widths, display type,
                etc - but usually focuses around
                <code>min-width</code>
                and
                <code>max-width</code>
                .
            </p>
            <ul>
                <li>Modify the width of column in our grid</li>
                <li>Stack elements instead of float wherever necessary</li>
                <li>Resize headings and text to be more appropriate for devices</li>
            </ul>
            <p>Use media queries responsibly and only as a start to your mobile audiences. For larger projects, do
                consider dedicated code bases and not layers of media queries.</p>

            <h2>Supported devices</h2>
            <p>Bootstrap supports a handful of media queries in a single file to help make your projects more
                appropriate on different devices and screen resolutions. Here's what's included:</p>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Label</th>
                        <th>Layout width</th>
                        <th>Column width</th>
                        <th>Gutter width</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Smartphones</td>
                        <td>480px and below</td>
                        <td colspan="2" class="muted">Fluid columns, no fixed widths</td>
                    </tr>
                    <tr>
                        <td>Smartphones to tablets</td>
                        <td>767px and below</td>
                        <td colspan="2" class="muted">Fluid columns, no fixed widths</td>
                    </tr>
                    <tr>
                        <td>Portrait tablets</td>
                        <td>768px and above</td>
                        <td>42px</td>
                        <td>20px</td>
                    </tr>
                    <tr>
                        <td>Default</td>
                        <td>980px and up</td>
                        <td>60px</td>
                        <td>20px</td>
                    </tr>
                    <tr>
                        <td>Large display</td>
                        <td>1200px and up</td>
                        <td>70px</td>
                        <td>30px</td>
                    </tr>
                </tbody>
            </table>
            
<b:codeblock>
/* Landscape phones and down */
@media (max-width: 480px) { ... }
 
/* Landscape phone to portrait tablet */
@media (max-width: 767px) { ... }
 
/* Portrait tablet to landscape and desktop */
@media (min-width: 768px) and (max-width: 979px) { ... }
 
/* Large desktop */
@media (min-width: 1200px) { ... }</b:codeblock>

            <h2>Responsive utility classes</h2>
            <p>
                For faster mobile-friendly development, use these utility classes for showing and hiding content by
                device. Below is a table of the available classes and their effect on a given media query layout
                (labeled by device). They can be found in
                <code>responsive.less</code>
                .
            </p>
            <table class="table table-bordered table-striped responsive-utilities">
                <thead>
                    <tr>
                        <th>Class</th>
                        <th>Phones <small>480px and below</small></th>
                        <th>Tablets <small>767px and below</small></th>
                        <th>Desktops <small>768px and above</small></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th><code>.visible-phone</code></th>
                        <td class="is-visible">Visible</td>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-hidden">Hidden</td>
                    </tr>
                    <tr>
                        <th><code>.visible-tablet</code></th>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-visible">Visible</td>
                        <td class="is-hidden">Hidden</td>
                    </tr>
                    <tr>
                        <th><code>.visible-desktop</code></th>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-visible">Visible</td>
                    </tr>
                    <tr>
                        <th><code>.hidden-phone</code></th>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-visible">Visible</td>
                        <td class="is-visible">Visible</td>
                    </tr>
                    <tr>
                        <th><code>.hidden-tablet</code></th>
                        <td class="is-visible">Visible</td>
                        <td class="is-hidden">Hidden</td>
                        <td class="is-visible">Visible</td>
                    </tr>
                    <tr>
                        <th><code>.hidden-desktop</code></th>
                        <td class="is-visible">Visible</td>
                        <td class="is-visible">Visible</td>
                        <td class="is-hidden">Hidden</td>
                    </tr>
                </tbody>
            </table>

            <h3>When to use</h3>
            <p>Use on a limited basis and avoid creating entirely different versions of the same site. Instead, use
                them to complement each device's presentation.</p>

            <h3>Responsive utilities test case</h3>
            <p>Resize your browser or load on different devices to test the above classes.</p>
            <h4>Visible on...</h4>
            <p>Green checkmarks indicate that class is visible in your current viewport.</p>
            <ul class="responsive-utilities-test">
                <li>Phone<span class="visible-phone">✔ Phone</span></li>
                <li>Tablet<span class="visible-tablet">✔ Tablet</span></li>
                <li>Desktop<span class="visible-desktop">✔ Desktop</span></li>
            </ul>
            <h4>Hidden on...</h4>
            <p>Here, green checkmarks indicate that class is hidden in your current viewport.</p>
            <ul class="responsive-utilities-test hidden-on">
                <li>Phone<span class="hidden-phone">✔ Phone</span></li>
                <li>Tablet<span class="hidden-tablet">✔ Tablet</span></li>
                <li>Desktop<span class="hidden-desktop">✔ Desktop</span></li>
            </ul>

        </section>
    </ui:define>
</ui:composition>